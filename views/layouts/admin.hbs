<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}} | Admin Panel - Tech Blog</title>
  <meta name="description" content="{{description}}">
  
  <!-- Google Fonts 预连接和预加载 -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" as="style">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
  
  <!-- 使用本地Tailwind CSS -->
  <link rel="stylesheet" href="/css/styles.css">
  
  <!-- 使用本地Highlight.js -->
  <link rel="stylesheet" href="/css/atom-one-dark.css">
  <script src="/js/highlight.min.js"></script>
  
  <!-- 使用本地Marked.js -->
  <script src="/js/marked.min.js"></script>
  
  <!-- 控制字体加载的脚本 - 必须放在头部 -->
  <script>
    // 快速检查字体是否已加载
    (function() {
      // 移除no-js类
      document.documentElement.classList.remove('no-js');
      
      // 检查字体是否已缓存并可用
      if (sessionStorage.fontsLoaded) {
        document.documentElement.classList.add('fonts-loaded');
        return;
      }
      
      // 字体加载完成后的处理
      if ("fonts" in document) {
        Promise.all([
          document.fonts.load('1em Inter'),
          document.fonts.load('1em JetBrains Mono')
        ]).then(function () {
          document.documentElement.classList.add('fonts-loaded');
          // 缓存字体加载状态
          sessionStorage.fontsLoaded = true;
        });
      } else {
        // 回退：在旧浏览器中设置超时后假定字体已加载
        setTimeout(function() {
          document.documentElement.classList.add('fonts-loaded');
        }, 300);
      }
    })();
  </script>
</head>
<body class="bg-gray-900 min-h-screen flex flex-col">
  {{#if true}}
    {{!-- 设置isAdminPage为true，确保显示管理员导航栏 --}}
    {{assign "isAdminPage" true}}
  {{/if}}

  <!-- Include the universal header component -->
  {{> header}}

  <!-- Flash Messages -->
  {{#if success_msg}}
    <div class="bg-green-900 text-green-100 px-4 py-3 shadow-md mb-4" role="alert" aria-live="polite">
      <div class="container mx-auto">
        <p>{{success_msg}}</p>
      </div>
    </div>
  {{/if}}
  
  {{#if error_msg}}
    <div class="bg-red-900 text-red-100 px-4 py-3 shadow-md mb-4" role="alert" aria-live="assertive">
      <div class="container mx-auto">
        <p>{{error_msg}}</p>
      </div>
    </div>
  {{/if}}
  
  <!-- Main content area -->
  <main id="main-content" class="flex-1" tabindex="-1">
    {{{body}}}
  </main>
  
  <!-- Admin footer -->
  <footer class="bg-gray-800 border-t border-gray-700 py-4" role="contentinfo">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <p class="text-white text-sm">© {{currentYear}} Tech Blog Admin Panel</p>
        <div class="mt-2 md:mt-0">
          <a href="/" class="text-cyan-400 hover:text-cyan-300 text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-cyan-500 rounded-md px-2 py-1 min-h-[44px] min-w-[44px] flex items-center">View Blog</a>
        </div>
      </div>
    </div>
  </footer>
  
  <!-- JavaScript for common admin functionality -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      //Make sure the marked library is loaded correctly
      console.log('Marked library loaded:', typeof marked !== 'undefined');
      
      // Initialize syntax highlighting for code preview
      if (typeof hljs !== 'undefined') {
        document.querySelectorAll('pre code').forEach((block) => {
          hljs.highlightBlock(block);
        });
      }
      
      // Flash messages auto-hide after 5 seconds
      const flashMessages = document.querySelectorAll('.flash-message');
      if (flashMessages.length) {
        setTimeout(() => {
          flashMessages.forEach(message => {
            message.classList.add('opacity-0');
            setTimeout(() => {
              message.remove();
            }, 300);
          });
        }, 5000);
      }
      
      // Make form error messages accessible with WAI-ARIA
      const errorMessages = document.querySelectorAll('.error-message');
      if (errorMessages.length) {
        errorMessages.forEach(message => {
          const targetId = message.getAttribute('data-for');
          if (targetId) {
            const targetField = document.getElementById(targetId);
            if (targetField) {
              targetField.setAttribute('aria-invalid', 'true');
              targetField.setAttribute('aria-describedby', `${targetId}-error`);
              message.id = `${targetId}-error`;
              message.setAttribute('role', 'alert');
            }
          }
        });
      }
    });
  </script>
</body>
</html> 